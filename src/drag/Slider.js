/** slider.js * (c) 2007 Garrett Smith * http:// dhtmlkitchen.com * * requires: Draggable, EventPublisher */APE.namespace("APE.drag");APE.drag.Slider = function(el, iDirection) {	this.id = el.id;	this.dir = iDirection;	this.value = 0;	this.rationalValue = 0;    var handle = APE.drag.Draggable.getByNode(el, iDirection);	handle.keepInContainer = true;	handle.focusClassName = "ape-slider-h-handle-focus";    this.handle = handle;	this.trackbar = el.parentNode; 	this.tDist = 0;    this.init();};(function(){    var drag = APE.drag, Slider = drag.Slider,        constraints = drag.Draggable.constraints;    Slider.getByNode = APE.getByNode;    Slider.activeSlider = null;    Slider.direction = {        HORZ : constraints.HORZ,        VERT : constraints.VERT    };})();APE.drag.Slider.prototype = {         init : function() {        var EventPublisher = APE.EventPublisher,            el = document.getElementById(this.id),            handle = this.handle,            container = this.trackbar;        EventPublisher.add(handle, "ondragend", this.dragEnd, this);        EventPublisher.add(handle, "onglideend", this.dragEnd, this);                        EventPublisher.add(handle, "ondrag", this._onslide, this);        EventPublisher.add(handle, "onfocus", this._onfocus, this);        EventPublisher.add(handle, "onblur", this._onblur, this);        EventPublisher.add(handle, "onglide", this._onslide, this);        EventPublisher.add(handle, "ondragstop", this._onslide, this);                // IE and Webkit ignore keyEvents on the element.        EventPublisher.add(document, "onkeydown", this._keyDown, this);        if(this.dir === this.constructor.direction.VERT){            this.tDist = container.clientHeight - el.offsetHeight;        }        else {            this.tDist = container.clientWidth - el.offsetWidth;        }        // Default: use pixels for min/max.        if(this.maxValue == undefined)             this.maxValue = this.tDist;        EventPublisher.add(this.trackbar, "onmousedown", this.trackbarMouseDown);    },    ticks : 15,        	rationalValue : 0,    minValue : 0,    maxValue : undefined,	slideToX : function(x) {    	this.handle.moveToX(x);    	if(typeof slider.onslide == "function")        	slider.onslide();                    },        /** setValue moves the slider to x or y coordinate based on value      */	setValue : function(v) {        // keep in range, throw no error.     	v = Math.max(this.minValue, v);    	v = Math.min(this.maxValue, v);    	var h = this.handle,            d = this.maxValue - this.minValue,            rationalValue = (v - this.minValue) / d;        // this.handle.onbeforedragstart();    	if(this.dir === this.constructor.direction.VERT) {                     	h.moveToY(this.tDist  * (1 - rationalValue));        }    	else {         	h.moveToX(this.tDist * rationalValue );        }    	this.rationalValue = rationalValue;    	this.value = v;    },    	slideToY : function(y) {    	this.handle.moveToY(y);    	this.onslide();    },    	setRationalValue : function(fRat, bOnslide) {    	fRat = Math.max(0, fRat);    	fRat = Math.min(1, fRat);    	this.rationalValue = fRat;    	this.setValue(this.minValue + (fRat * (this.maxValue - this.minValue)));    	if(bOnslide)        	this._onslide({});    },    	dragEnd : function(e) {    	APE.dom.removeClass(this.trackbar, "scrollbar-track-active");    	if(typeof this.onslideend == "function")        	this.onslideend(e);     },	trackbarMouseDown : function(e) {    	var APE = window.APE, dom = APE.dom,            target = dom.Event.getTarget(e),            slider = APE.drag.Slider.instances[this.getElementsByTagName("*")[0].id];    	if(target != this) return true;    	if(!e) e = event;    	else if(e.preventDefault)        	e.preventDefault();    	dom.addClass(this, "ape-slider-track-active");    	slider.handle.grab(e);    	slider._onslide(e);                  	return false;    },    	_onfocus : function(e) {        this.constructor.activeSlider = this;    	APE.dom.addClass(this.trackbar,  "ape-slider-track-active");    },    	_onblur : function(e) {        var Slider = this.constructor;        if(Slider.activeSlider === this)            Slider.activeSlider = null;    	APE.dom.removeClass(this.trackbar,  "ape-slider-track-active");    },    	_onslide : function(e) {     	this.value = 0;    	var el = document.getElementById(this.id),            rationalValue = 0;    	if(this.dir === this.constructor.direction.HORZ) {        	if(el.offsetLeft > 0)            	rationalValue = el.offsetLeft / this.tDist;        	else            	rationalValue = 0;        }    	else {        	if(el.offsetTop > 0) {            	var distFromBottom = this.tDist - el.offsetTop;            	rationalValue = distFromBottom / this.tDist;            }        	else            	rationalValue = 1;        }    	this.rationalValue = rationalValue;    	this.value = rationalValue * (this.maxValue - this.minValue);    	if(this.onslide) this.onslide(e||{});     },    	_keyDown : function(e) {    	e = e||event;    	if(e.stopPropagation) {            // Safari 3 doesn't actually stop propagation; ignores cancelBubble = true.            // Doesn't support originalTarget, either.        	e.stopPropagation();        }    	e.cancelBubble = true; // just in case some actually fires a keyEvent on a handle.        // IE, Opera, Webkit all need this:        // If stopPropagation and cancelBubble fail, check the timeStamp.        // If the timeStamp is recurrant, exit.        // Opera 9.2: timeStamp is always 0. always. IE does not support event.timeStamp.    	var timeStamp = new Date-0,             Slider = APE.drag.Slider,            slider = Slider.activeSlider;        if(!slider) return;    	if(timeStamp - arguments.callee.timeStamp < 5) return; // recurrant.    	arguments.callee.timeStamp = timeStamp; // record.    	var keyCode = e.keyCode,            instances = Slider.instances,            lArr = keyCode === 37,            rArr = keyCode === 39,            uArr = keyCode === 38,            dArr = keyCode === 40;    	if( !(lArr || rArr || uArr || dArr) ) return true;    	if(slider && slider.id in instances) {        	if(lArr || dArr)            	slider.setValue(slider.value - slider.maxValue/slider.ticks, 0);        	else if(rArr || uArr)            	slider.setValue(slider.value + slider.maxValue/slider.ticks, 0);            if(slider.onslide)            	slider.onslide(e);        	return false;        }    }};